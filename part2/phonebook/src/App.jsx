import { useState, useEffect } from 'react'

// Import Components:
import Filter from './components/Filter'
import Notification from './components/Notification'
import PersonForm from './components/PersonForm'
import Persons from './components/Persons'

// Import Services:
import phonebookService from './services/phonebook'

// Constants:
const NOTIFICATION_TIMEOUT = 3000


// App Component:
const App = () => {
  // State Variables: 
  const [persons, setPersons] = useState([])
  const [newName, setNewName] = useState('')
  const [newNumber, setNewNumber] = useState('')
  const [filter, setFilter] = useState('')
  const [notification, setNotification] = useState(null)

  // Effect Hook - Fetch Initial Data:
  useEffect(() => {
    phonebookService
      .getAll()
      .then(response => {
        console.log('Data:', response)
        setPersons(response)
      })
      .catch(error => {
        console.log('Error Fetching Data:', error)
        setNotification({
          message: 'Error fetching data',
          type: 'error'
        })
        setTimeout(() => setNotification(null), NOTIFICATION_TIMEOUT)
      })
  }, [])

  // Filter Persons (Case Insensitive):
  // Filter by name or number (Additional Feature).
  const filteredPersons = persons.filter(person => 
    person.name.toLowerCase().includes(filter.toLowerCase()) ||
    person.number.includes(filter)
  )

  // Event Handler - Add Contact:
  const addPerson = (event) => {
    event.preventDefault()
    console.log('Add Contact Button Clicked', event.target)
    
    // Check if name is empty:
    // (Additional Feature)
    if (newName === '') {
      alert('Name is required')
      return
    }

    // Check if name already exists:
    const existingPerson = persons.find(person => person.name === newName)
    if (existingPerson) {
      if (window.confirm(`${newName} is already added to phonebook, replace the number?`)) {
        const updatedPerson = { ...existingPerson, number: newNumber }
        phonebookService
          .update(existingPerson.id, updatedPerson)
          .then(response => {
            console.log('Person Updated:', response)
            setNotification({
              message: `Contact '${newName}' was updated`,
              type: 'success'
            })
            setTimeout(() => setNotification(null), NOTIFICATION_TIMEOUT)
            setPersons(persons.map(person => person.id === existingPerson.id ? response : person))
            setNewName('')
            setNewNumber('')
          })
          .catch(error => {
            console.log('Error Updating Person:', error)
            setNotification({
              message: `Error updating '${newName}' contact`,
              type: 'error'
            })
            setTimeout(() => setNotification(null), NOTIFICATION_TIMEOUT)
          })
      }
      return
    }

    // Add New Person to Phonebook:
    const personObject = { 
      name: newName,
      number: newNumber,
      //id: persons.length + 1 -> Automatically generated by the server.
    }

    // Update Phonebook and Reset Forms:
    phonebookService
      .create(personObject)
      .then(response => {
        console.log('New Person Added:', response)
        setNotification({
          message: `New contact '${newName}' was added to the phonebook`,
          type: 'success'
        })
        setTimeout(() => setNotification(null), NOTIFICATION_TIMEOUT)
        setPersons(persons.concat(response))
        setNewName('')
        setNewNumber('')
      })
      .catch(error => {
        console.log('Error Adding New Person:', error)
        setNotification({
          message: `Error adding '${newName}' contact`,
          type: 'error'
        })
        setTimeout(() => setNotification(null), NOTIFICATION_TIMEOUT)
      })
  }

  // Event Handler - Handle Name Change:
  const handleNameChange = (event) => {
    console.log(event.target.value)
    setNewName(event.target.value)
  }

  // Event Handler - Handle Number Change:
  // Allow only numbers and dashes (Additional Feature).
  const handleNumberChange = (event) => {
    console.log(event.target.value)
    if (event.target.value === '' || /^[0-9-]*$/.test(event.target.value)) {
      setNewNumber(event.target.value);
    } 
  }

  // Event Handler - Handle Filter Change:
  const handleFilterChange = (event) => {
    console.log(event.target.value)
    setFilter(event.target.value)
  }

  // Event Handler - Delete Contact:
  const handleDelete = (id) => {
    const person = persons.find(person => person.id === id)
    if (window.confirm(`Delete ${person.name}?`)) {
      phonebookService
        .remove(id)
        .then(() => {
          console.log('Person Deleted: ', person.name)
          setNotification({
            message: `Contact '${person.name}' was deleted`,
            type: 'success'
          })
          setTimeout(() => setNotification(null), NOTIFICATION_TIMEOUT)
          setPersons(persons.filter(person => person.id !== id))
        })
        .catch(error => {
          console.log('Error Deleting Person:', error)
          if (error.response.status === 404) {
            setNotification({
              message: `Contact '${person.name}' not found (Already deleted)`,
              type: 'error'
            })
            setPersons(persons.filter(person => person.id !== id))
          } else {
            setNotification({
              message: `Error deleting '${person.name}' contact`,
              type: 'error'
            })
          }
          setTimeout(() => setNotification(null), NOTIFICATION_TIMEOUT)
        })
    }
  }

  return (
    <>
      <h1>Phonebook</h1>
      <Notification notification={notification} />
      <br />
      <Filter filter={filter} handleFilterChange={handleFilterChange} />
      <br />
      <h2>Add New Contact:</h2>
      <PersonForm 
        addPerson={addPerson}
        newName={newName}
        handleNameChange={handleNameChange}
        newNumber={newNumber}
        handleNumberChange={handleNumberChange}
      />
      <br />
      <h2>Numbers:</h2>
      <Persons persons={filteredPersons} onDelete={handleDelete} />
    </>
  )
}

export default App