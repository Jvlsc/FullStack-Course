import { useState, useEffect } from 'react'
import axios from 'axios'
import phonebookService from './services/phonebook'

// Filter Component:
const Filter = ({ filter, handleFilterChange }) => {
  return (
    <div>
      Filter Shown with: <input value={filter} onChange={handleFilterChange} />
    </div>
  )
}

// PersonForm Component:
const PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => {
  return (
    <form onSubmit={addPerson}>
      <div>
        Name: <input value={newName} onChange={handleNameChange} />
      </div>
      <div>
        Number: <input value={newNumber} onChange={handleNumberChange} />
      </div>
      <div>
        <button type="submit">add</button>
      </div>
    </form>
  )
}

// Person Component:
const Person = ({ person, onDelete }) => {
  return (
    <li>
      {person.name}: {person.number} <button onClick={() => onDelete(person.id)}>delete</button>
    </li>
  )
}

// Persons Component:
const Persons = ({ persons, onDelete }) => {
  return (
    <ul>
      {persons.map(person => <Person key={person.id} person={person} onDelete={onDelete} />)}
    </ul>
  )
}

// App Component:
const App = () => {
  // State Variables: 
  const [persons, setPersons] = useState([])
  const [newName, setNewName] = useState('')
  const [newNumber, setNewNumber] = useState('')
  const [filter, setFilter] = useState('')

  // Effect Hook - Fetch Initial Data:
  useEffect(() => {
    phonebookService
      .getAll()
      .then(response => {
        console.log('Data:', response)
        setPersons(response)
      })
      .catch(error => {
        console.log('Error Fetching Data:', error)
      })
  }, [])

  // Filter Persons (Case Insensitive):
  // Filter by name or number (Additional Feature).
  const filteredPersons = persons.filter(person => 
    person.name.toLowerCase().includes(filter.toLowerCase()) ||
    person.number.includes(filter)
  )

  // Event Handler - Add Contact:
  const addPerson = (event) => {
    event.preventDefault()
    console.log('Add Contact Button Clicked', event.target)
    
    // Check if name is empty:
    // (Additional Feature)
    if (newName === '') {
      alert('Name is required')
      return
    }

    // Check if name already exists:
    if (persons.some(person => person.name === newName)) {
      alert(`${newName} is already added to phonebook`)
      return
    }

    // Add New Person to Phonebook:
    const personObject = { 
      name: newName,
      number: newNumber,
      //id: persons.length + 1 -> Automatically generated by the server.
    }

    // Update Phonebook and Reset Forms:
    phonebookService
      .create(personObject)
      .then(response => {
        console.log('New Person Added:', response)
        setPersons(persons.concat(response))
        setNewName('')
        setNewNumber('')
      })
      .catch(error => {
        console.log('Error Adding New Person:', error)
      })
  }

  // Event Handler - Handle Name Change:
  const handleNameChange = (event) => {
    console.log(event.target.value)
    setNewName(event.target.value)
  }

  // Event Handler - Handle Number Change:
  // Allow only numbers and dashes (Additional Feature).
  const handleNumberChange = (event) => {
    console.log(event.target.value)
    if (event.target.value === '' || /^[0-9-]*$/.test(event.target.value)) {
      setNewNumber(event.target.value);
    } 
  }

  // Event Handler - Handle Filter Change:
  const handleFilterChange = (event) => {
    console.log(event.target.value)
    setFilter(event.target.value)
  }

  // Event Handler - Delete Contact:
  const handleDelete = (id) => {
    const person = persons.find(person => person.id === id)
    if (window.confirm(`Delete ${person.name}?`)) {
      phonebookService
        .remove(id)
        .then(() => {
          console.log('Person Deleted: ', person.name)
          setPersons(persons.filter(p => p.id !== id))
        })
        .catch(error => {
          console.log('Error Deleting Person:', error)
        })
    }
  }

  return (
    <>
      <h1>Phonebook</h1>
      <Filter filter={filter} handleFilterChange={handleFilterChange} />
      <br />
      <h2>Add New Contact:</h2>
      <PersonForm 
        addPerson={addPerson}
        newName={newName}
        handleNameChange={handleNameChange}
        newNumber={newNumber}
        handleNumberChange={handleNumberChange}
      />
      <br />
      <h2>Numbers:</h2>
      <Persons persons={filteredPersons} onDelete={handleDelete} />
    </>
  )
}

export default App